<?xml version="1.0" encoding="UTF-8" ?>
<resource_file type="PackedScene" subresource_count="8" version="1.0" version_name="Godot Engine v1.0.stable.custom_build">
	<ext_resource path="res://new_mesh.res" type="Mesh"></ext_resource>
	<ext_resource path="res://Map-Cubes.gt" type="MeshLibrary"></ext_resource>
	<ext_resource path="res://cone_2.scn" type="PackedScene"></ext_resource>
	<resource type="GDScript" path="local://1">
		<string name="script/source"> "&#000a;extends Spatial&#000a;&#000a;export(FixedMaterial) var material = null&#000a;&#000a;# member variables here, example:&#000a;# var a=2&#000a;# var b=&quot;textvar&quot;&#000a;&#000a;var map&#000a;var nav&#000a;&#000a;const SPEED=4.0&#000a;&#000a;var camrot=0.0&#000a;&#000a;var begin=Vector3()&#000a;var end=Vector3()&#000a;var m = FixedMaterial.new()&#000a;&#000a;var path=[]&#000a;&#000a;&#000a;func _process(delta):&#000a;&#0009;#print(&quot;update&quot;)&#000a;&#0009;#print(get_node(&quot;Position3D&quot;).get_linear_velocity())&#000a;&#0009;if (path.size()&lt;1):&#000a;&#0009;&#0009;#print(&quot;path &lt; 1&quot;)&#000a;&#0009;&#0009;var to_walk = delta*SPEED&#000a;&#0009;&#0009;var to_watch = Vector3(0,1,0)&#000a;&#0009;&#0009;while(to_walk&lt;0 and path.size()&lt;=2):&#000a;&#0009;&#0009;&#0009;var pfrom = path[path.size()-1]&#000a;&#0009;&#0009;&#0009;var pto = path[path.size()-2]&#000a;&#0009;&#0009;&#0009;to_watch = (pto - pfrom).normalized()*3&#000a;&#0009;&#0009;&#0009;var d = pfrom.distance_to(pto)&#000a;&#0009;&#0009;&#0009;if (d&gt;=to_walk):&#000a;&#0009;&#0009;&#0009;&#0009;path.remove(path.size()-1)&#000a;&#0009;&#0009;&#0009;&#0009;to_walk-=d&#000a;&#0009;&#0009;&#0009;else:&#000a;&#0009;&#0009;&#0009;&#0009;path[path.size()-1] = pfrom.linear_interpolate(pto,to_walk/d)&#000a;&#0009;&#0009;&#0009;&#0009;to_walk=0&#000a;&#0009;&#0009;&#0009;&#0009;&#000a;&#0009;&#0009;var atpos = path[path.size()-1]&#000a;&#0009;&#0009;var atdir = to_watch&#000a;&#0009;&#0009;#atdir.y=0&#000a;&#0009;&#0009;&#000a;&#0009;&#0009;var t = Transform()&#000a;&#0009;&#0009;t.origin=atpos&#000a;&#0009;&#0009;t=t.looking_at(atpos+atdir,Vector3(0,1,0))&#000a;&#0009;&#0009;get_node(&quot;Position3D&quot;).set_transform(t)&#000a;&#0009;&#0009;#get_node(&quot;RigidBody&quot;).set_transform(t)&#000a;&#0009;&#0009;#get_node(&quot;Position3D&quot;).set_linear_velocity(atdir)&#000a;&#0009;&#0009;#print(get_node(&quot;Position3D&quot;).get_linear_velocity())&#000a;&#0009;&#0009;&#000a;&#0009;&#0009;if (path.size()&gt;2):&#000a;&#0009;&#0009;&#0009;#print(&quot;path &gt; 2&quot;)&#000a;&#0009;&#0009;&#0009;path=[]&#000a;&#0009;&#0009;&#0009;set_process(false)&#000a;&#0009;&#0009;&#0009;&#0009;&#000a;&#0009;else:&#000a;&#0009;&#0009;set_process(false)&#000a;&#000a;var draw_path = true&#000a;var im&#000a;func _update_path():&#000a;&#0009;m.set_line_width(1)&#000a;&#0009;m.set_point_size(3)&#000a;&#0009;m.set_fixed_flag(FixedMaterial.FLAG_USE_POINT_SIZE,true)&#000a;&#0009;m.set_flag(Material.FLAG_UNSHADED,true)&#000a;&#0009;&#000a;&#0009;var p = nav.get_simple_path(begin,end,false)&#000a;&#0009;print(&quot;-&lt;PFAD: &quot;,p,&quot; Length: &quot;, p.size())&#000a;&#0009;path=Array(p) # Vector3array to complex to use, convert to regular array&#000a;&#0009;#print(&quot;converted: &quot;,path, &quot; Length: &quot;, path.size())&#000a;&#0009;path.invert()&#000a;&#0009;set_process(true)&#000a;&#0009;&#000a;&#0009;if (draw_path):&#000a;&#0009;&#0009;im.set_material_override(m)&#000a;&#0009;&#0009;im.clear()&#000a;&#0009;&#0009;im.begin(Mesh.PRIMITIVE_POINTS,null)&#000a;&#0009;&#0009;im.add_vertex(begin)&#000a;&#0009;&#0009;im.add_vertex(end)&#000a;&#0009;&#0009;im.end()&#000a;&#0009;&#0009;im.begin(Mesh.PRIMITIVE_LINE_STRIP,null)&#000a;&#0009;&#0009;for x in p:&#000a;&#0009;&#0009;&#0009;im.add_vertex(x)&#000a;&#0009;&#0009;im.end()&#000a;&#000a;func _input(ev):&#000a;&#000a;&#0009;if (ev.type==InputEvent.MOUSE_BUTTON and ev.button_index==BUTTON_LEFT and ev.pressed):&#000a;                &#000a;&#0009;&#0009;var from = get_node(&quot;DirectionalLight/Camera&quot;).project_ray_origin(ev.pos)&#000a;&#0009;&#0009;var to = from+get_node(&quot;DirectionalLight/Camera&quot;).project_ray_normal(ev.pos)*100&#000a;&#0009;&#0009;var p = nav.get_closest_point_to_segment(from,to)&#000a;&#0009;&#0009;#print(&quot;FROM: &quot;,from)&#000a;&#0009;&#0009;#print(&quot;TO: &quot;,to)&#000a;&#0009;&#0009;#print(&quot;Segment: &quot;,p)&#000a;&#0009;&#000a;&#0009;&#0009;begin=nav.get_closest_point(get_node(&quot;Position3D&quot;).get_translation())&#000a;&#0009;&#0009;end=p&#000a;&#0009;&#0009;#print(&quot;BEGIN: &quot;,begin)&#000a;&#000a;&#0009;&#0009;_update_path()&#000a;&#0009;&#0009;&#000a;&#000a;func _ready():&#000a;&#0009;# Initalization here&#000a;&#0009;var MapLoader_class = load(&quot;res://Scripts/MapLoader.gd&quot;)&#000a;&#0009;var mapLoader = MapLoader_class.new()&#000a;&#0009;mapLoader.setMaterial(material)&#000a;&#0009;#mapLoader.test()&#000a;&#0009;&#000a;&#0009;map = get_node(&quot;GridMap&quot;)&#000a;&#0009;var navi = mapLoader.generate_map_xml(map)&#000a;&#0009;#map.bake_geometry()&#000a;&#0009;&#000a;&#0009;var p = navi&#000a;&#0009;var mesh = mapLoader.generate_navi_mesh(p)&#000a;&#0009;&#000a;&#0009;nav = Navigation.new()&#000a;&#0009;var navmesh = NavigationMeshInstance.new()&#000a;&#0009;var navi = NavigationMesh.new()&#000a;&#0009;navi.set_vertices(p)&#000a;&#0009;for i in range(0,p.size(),3):&#000a;&#0009;&#0009;var poly = IntArray()&#000a;&#0009;&#0009;poly.push_back(i)&#000a;&#0009;&#0009;poly.push_back(i+1)&#000a;&#0009;&#0009;poly.push_back(i+2)&#000a;&#0009;&#0009;navi.add_polygon(poly)&#000a;&#0009;&#000a;&#0009;var m = MeshInstance.new()&#000a;&#0009;&#000a;&#0009;add_child(nav)&#000a;&#0009;nav.add_child(m)&#000a;&#0009;m.add_child(navmesh)&#000a;&#0009;&#000a;&#0009;navmesh.set_navigation_mesh(navi)&#000a;&#0009;m.set_mesh(mesh)&#000a;&#0009;&#000a;&#0009;&#000a;&#0009;#var col = StaticBody.new()&#000a;&#0009;#var coll_shape = CollisionShape.new()&#000a;&#0009;#StaticBody.set_shape()&#000a;&#0009;&#000a;&#0009;#add_child(col)&#000a;&#0009;#get_node(col).add_child(coll_shape)&#000a;&#0009;&#000a;&#0009;im = ImmediateGeometry.new()&#000a;&#0009;nav.add_child(im)&#000a;&#0009;&#000a;&#0009;#print_tree()&#000a;&#0009;#print(m.get_mesh())&#000a;&#0009;#print(navmesh.get_navigation_mesh())&#000a;&#0009;#print(navi.get_vertices())&#000a;&#0009;#print(navi.get_polygon_count())&#000a;&#0009;&#000a;&#0009;set_fixed_process(true)&#000a;&#0009;set_process_input(true)&#000a;&#000a;&#0009;#Teste Material override...bei einer neuen Welt werden nur die Texturen Ã¼berschrieben&#000a;&#0009;&quot;&quot;&quot;&#000a;&#0009;var mat = FixedMaterial.new()&#000a;&#0009;var tex = load(&quot;res://blender/textures/RockSmooth0116_5_thumblarge.jpg&quot;)&#000a;&#0009;mat.set_texture(0,tex)&#000a;&#0009;map.get_theme().get_item_mesh(2).surface_set_material(0,mat)&#000a;&#0009;&quot;&quot;&quot;&#000a;&#0009;mapLoader.test()&#000a;&#0009;pass&#000a;&#000a;&#000a;#MapLoader.gd&#000a;func generate_map(map):&#000a;&#0009;var grid = 1&#000a;&#0009;var file = File.new()&#000a;&#0009;file.open(&quot;res://Maps/test.map&quot;, File.READ)&#000a;&#0009;print(&quot;FILE-len: &quot;,file.get_len())&#000a;&#0009;print(&quot;FILE-pos: &quot;,file.get_pos())&#000a;&#0009;var x_size = file.get_line().to_int()&#000a;&#0009;var y_size = file.get_line().to_int()&#000a;&#0009;print(&quot;MAP-x_size: &quot;,x_size)&#000a;&#0009;print(&quot;MAP-y_size: &quot;,y_size)&#000a;&#0009;print(&quot;FILE-pos: &quot;,file.get_pos())&#000a;&#0009;&#000a;&#0009;for y in range(0,y_size):&#000a;&#0009;&#0009;for x in range(0,x_size):&#000a;&#0009;&#0009;&#0009;var item = file.get_line().to_int()&#000a;&#0009;&#0009;&#0009;map.set_cell_item(x*grid,y*grid,0,item)&#000a;&#0009;&#0009;&#0009;print(&quot;MAP: &quot;,x*grid,&quot;|&quot;,y*grid,&quot;|&quot;,item)&#000a;&#0009;&#0009;&#0009;pass&#000a;&#0009;return generate_navi(map,x_size,y_size)&#000a;&#0009;&quot;&quot;&quot;&#000a;&#0009;for i in range(0,6):&#000a;&#0009;&#0009;for j in range(0,6):&#000a;&#0009;&#0009;&#0009;map.set_cell_item(i,j,-1,0)&#000a;&#0009;&quot;&quot;&quot;&#000a;&#000a;#MapLoader.gd&#000a;func generate_navi(gridMap,x_size,y_size):&#000a;&#0009;var cell_size = gridMap.get_cell_size()&#000a;&#0009;var hover = 0#0.01&#000a;&#0009;var navi = Vector3Array()&#000a;&#0009;for x in range(0,x_size):&#000a;&#0009;&#0009;for y in range(0,y_size):&#000a;&#0009;&#0009;&#0009;#print(gridMap.get_cell_item(x,y,0))&#000a;&#0009;&#0009;&#0009;if(gridMap.get_cell_item(x,y,0) == -1):&#000a;&#0009;&#0009;&#0009;&#0009;if!(gridMap.get_cell_item(x-1,y,0) == 1 &amp;&amp; gridMap.get_cell_item(x+1,y,0) == 1 || gridMap.get_cell_item(x,y-1,0) == -1): #nur wenns kein schacht ist&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3(x*cell_size, y*cell_size+hover, 0))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3(x*cell_size+cell_size, y*cell_size+hover, 0))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3(x*cell_size+cell_size, y*cell_size+hover, cell_size))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3(x*cell_size+cell_size, y*cell_size+hover, cell_size))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3(x*cell_size, y*cell_size+hover, cell_size))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3(x*cell_size, y*cell_size+hover, 0))&#000a;&#0009;&#0009;&#0009;&#0009;else:&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3(x*cell_size, y*cell_size+cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3(x*cell_size+cell_size, y*cell_size+cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3(x*cell_size+cell_size, y*cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3(x*cell_size+cell_size, y*cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3(x*cell_size, y*cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3(x*cell_size, y*cell_size+cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;if(gridMap.get_cell_item(x-1,y,0) == -1):&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3((x-1)*cell_size, y*cell_size+cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3((x-1)*cell_size+cell_size, y*cell_size+cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3((x-1)*cell_size+cell_size, y*cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#0009;&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3((x-1)*cell_size+cell_size, y*cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3((x-1)*cell_size, y*cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3((x-1)*cell_size, y*cell_size+cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;if(gridMap.get_cell_item(x+1,y,0) == -1):&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3((x+1)*cell_size, y*cell_size+cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3((x+1)*cell_size+cell_size, y*cell_size+cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3((x+1)*cell_size+cell_size, y*cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#0009;&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3((x+1)*cell_size+cell_size, y*cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3((x+1)*cell_size, y*cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3((x+1)*cell_size, y*cell_size+cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;if(gridMap.get_cell_item(x,y-1,0) == -1):&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3(x*cell_size, (y-1)*cell_size+cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3(x*cell_size+cell_size, (y-1)*cell_size+cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3(x*cell_size+cell_size, (y-1)*cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#0009;&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3(x*cell_size+cell_size, (y-1)*cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3(x*cell_size, (y-1)*cell_size, hover))&#000a;&#0009;&#0009;&#0009;&#0009;&#0009;&#0009;navi.push_back(Vector3(x*cell_size, (y-1)*cell_size+cell_size, hover))&#000a;&#0009;&#0009;&#0009;pass&#000a;&#0009;return navi&#000a;&#0009;pass&#000a;&#000a;#MapLoader.gd&#000a;func generate_navi_mesh(Vector3arr):&#000a;&#0009;var up = Vector3(0, 1, 0)&#000a;&#0009;&#000a;&#0009;# PRIMITIVE_POINTS = 0 - Render array as points (one vertex equals one point).&#000a;&#0009;# PRIMITIVE_LINES = 1 - Render array as lines (every two vertices a line is created).&#000a;&#0009;# PRIMITIVE_LINE_STRIP = 2 - Render array as line strip.&#000a;&#0009;# PRIMITIVE_LINE_LOOP = 3 - Render array as line loop (like line strip, but closed).&#000a;&#0009;# PRIMITIVE_TRIANGLES = 4 - Render array as triangles (every three vertices a triangle is created).&#000a;&#0009;# PRIMITIVE_TRIANGLE_STRIP = 5 - Render array as triangle strips.&#000a;&#0009;# PRIMITIVE_TRIANGLE_FAN = 6 - Render array as triangle fans.&#000a;&#0009;&#000a;&#0009;var surface = SurfaceTool.new()&#000a;&#0009;surface.begin(4) # 5 means TRIANGLE_STRIP&#000a;&#0009;&#000a;&#0009;if(material):&#000a;&#0009;&#0009;surface.set_material(material)&#000a;&#0009;&#000a;&#0009;for i in range(0,Vector3arr.size(),3):&#000a;&#0009;&#0009;surface.add_uv(Vector2(0, 1))&#000a;&#0009;&#0009;surface.add_normal(up)&#000a;&#0009;&#0009;surface.add_vertex(Vector3arr.get(i))&#000a;&#0009;&#0009;surface.add_uv(Vector2(1, 0))&#000a;&#0009;&#0009;surface.add_normal(up)&#000a;&#0009;&#0009;surface.add_vertex(Vector3arr.get(i+1))&#000a;&#0009;&#0009;surface.add_uv(Vector2(1, 1))&#000a;&#0009;&#0009;surface.add_normal(up)&#000a;&#0009;&#0009;surface.add_vertex(Vector3arr.get(i+2))&#000a;&#0009;&#000a;&#0009;return surface.commit()&#000a;&#0009;pass&#000a;&#000a;" </string>

	</resource>
	<resource type="FixedMaterial" path="local://2">
		<bool name="flags/visible"> True </bool>
		<bool name="flags/double_sided"> False </bool>
		<bool name="flags/invert_faces"> False </bool>
		<bool name="flags/unshaded"> False </bool>
		<bool name="flags/on_top"> False </bool>
		<bool name="flags/lightmap_on_uv2"> True </bool>
		<bool name="flags/colarray_is_srgb"> True </bool>
		<int name="params/blend_mode"> 1 </int>
		<int name="params/depth_draw"> 3 </int>
		<real name="params/line_width"> 0 </real>
		<bool name="fixed_flags/use_alpha"> False </bool>
		<bool name="fixed_flags/use_color_array"> False </bool>
		<bool name="fixed_flags/use_point_size"> False </bool>
		<bool name="fixed_flags/discard_alpha"> False </bool>
		<bool name="fixed_flags/use_xy_normalmap"> False </bool>
		<color name="params/diffuse"> 0, 0, 1, 1 </color>
		<color name="params/specular"> 0, 1, 0, 1 </color>
		<color name="params/emission"> 0, 0, 0, 1 </color>
		<int name="params/specular_exp"> 40 </int>
		<real name="params/detail_mix"> 1 </real>
		<int name="params/normal_depth"> 1 </int>
		<int name="params/shader"> 0 </int>
		<real name="params/shader_param"> 0.5 </real>
		<real name="params/glow"> 0 </real>
		<real name="params/point_size"> 1 </real>
		<transform name="uv_xform"> 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 </transform>
		<resource name="textures/diffuse"></resource>		<int name="textures/diffuse_tc"> 0 </int>
		<resource name="textures/detail"></resource>		<int name="textures/detail_tc"> 0 </int>
		<resource name="textures/specular"></resource>		<int name="textures/specular_tc"> 0 </int>
		<resource name="textures/emission"></resource>		<int name="textures/emission_tc"> 0 </int>
		<resource name="textures/specular_exp"></resource>		<int name="textures/specular_exp_tc"> 0 </int>
		<resource name="textures/glow"></resource>		<int name="textures/glow_tc"> 0 </int>
		<resource name="textures/normal"></resource>		<int name="textures/normal_tc"> 0 </int>
		<resource name="textures/shade_param"></resource>		<int name="textures/shade_param_tc"> 0 </int>

	</resource>
	<resource type="SphereShape" path="local://3">
		<real name="radius"> 1 </real>

	</resource>
	<resource type="GDScript" path="local://4">
		<string name="script/source"> "&#000a;extends Spatial&#000a;&#000a;# member variables here, example:&#000a;# var a=2&#000a;# var b=&quot;textvar&quot;&#000a;var t&#000a;&#000a;func _process(delta):&#000a;&#0009;t = get_parent().get_node(&quot;Position3D&quot;).get_translation()&#000a;&#0009;set_translation(t)&#000a;&#000a;func _ready():&#000a;&#0009;set_process(true)&#000a;&#0009;pass&#000a;&#000a;&#000a;" </string>

	</resource>
	<main_resource>
		<dictionary name="_bundled" shared="false">
			<string> "names" </string>
			<string_array  len="70">
				<string> "Spatial" </string>
				<string> "_import_path" </string>
				<string> "_import_transform" </string>
				<string> "visibility/visible" </string>
				<string> "script/script" </string>
				<string> "__meta__" </string>
				<string> "material" </string>
				<string> "GridMap" </string>
				<string> "theme/theme" </string>
				<string> "theme/bake" </string>
				<string> "lighting/bake" </string>
				<string> "cell/size" </string>
				<string> "cell/octant_size" </string>
				<string> "cell/center_x" </string>
				<string> "cell/center_y" </string>
				<string> "cell/center_z" </string>
				<string> "cell/scale" </string>
				<string> "data" </string>
				<string> "DirectionalLight" </string>
				<string> "transform/local" </string>
				<string> "layers" </string>
				<string> "params/enabled" </string>
				<string> "params/editor_only" </string>
				<string> "params/bake_mode" </string>
				<string> "params/energy" </string>
				<string> "colors/diffuse" </string>
				<string> "colors/specular" </string>
				<string> "shadow/shadow" </string>
				<string> "shadow/darkening" </string>
				<string> "shadow/z_offset" </string>
				<string> "shadow/z_slope_scale" </string>
				<string> "shadow/esm_multiplier" </string>
				<string> "shadow/blur_passes" </string>
				<string> "projector" </string>
				<string> "operator" </string>
				<string> "shadow/mode" </string>
				<string> "shadow/max_distance" </string>
				<string> "shadow/split_weight" </string>
				<string> "shadow/zoffset_scale" </string>
				<string> "Camera" </string>
				<string> "projection" </string>
				<string> "fov" </string>
				<string> "near" </string>
				<string> "far" </string>
				<string> "keep_aspect" </string>
				<string> "current" </string>
				<string> "visible_layers" </string>
				<string> "environment" </string>
				<string> "h_offset" </string>
				<string> "v_offset" </string>
				<string> "Position3D" </string>
				<string> "CollisionShape" </string>
				<string> "shape" </string>
				<string> "trigger" </string>
				<string> "MeshInstance" </string>
				<string> "geometry/visible" </string>
				<string> "geometry/material_override" </string>
				<string> "geometry/cast_shadow" </string>
				<string> "geometry/receive_shadows" </string>
				<string> "geometry/range_begin" </string>
				<string> "geometry/range_end" </string>
				<string> "geometry/extra_cull_margin" </string>
				<string> "geometry/billboard" </string>
				<string> "geometry/billboard_y" </string>
				<string> "geometry/depth_scale" </string>
				<string> "geometry/visible_in_all_rooms" </string>
				<string> "geometry/use_baked_light" </string>
				<string> "geometry/baked_light_tex_id" </string>
				<string> "mesh/mesh" </string>
				<string> "mesh/skeleton" </string>
			</string_array>
			<string> "version" </string>
			<int> 1 </int>
			<string> "conn_count" </string>
			<int> 0 </int>
			<string> "node_count" </string>
			<int> 8 </int>
			<string> "variants" </string>
			<array  len="34" shared="false">
				<node_path> "" </node_path>
				<transform> 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 </transform>
				<bool> True </bool>
				<resource  resource_type="Script" path="local://1">  </resource>
				<dictionary  shared="false">
					<string> "__editor_plugin_states__" </string>
					<dictionary  shared="false">
						<string> "Script" </string>
						<dictionary  shared="false">
							<string> "current" </string>
							<int> 2 </int>
							<string> "sources" </string>
							<array  len="3" shared="false">
								<node_path> "/root/EditorNode/@Panel3/@VBoxContainer6/@HSplitContainer8/@VSplitContainer9/@VSplitContainer10/@VBoxContainer11/@Panel16/@Control18/@CanvasItemEditor5873/@VSplitContainer5811/@HSplitContainer5812/@Control5813/@Control5814/@Viewport5815/Spatial" </node_path>
								<node_path> "/root/EditorNode/@Panel3/@VBoxContainer6/@HSplitContainer8/@VSplitContainer9/@VSplitContainer10/@VBoxContainer11/@Panel16/@Control18/@CanvasItemEditor5873/@VSplitContainer5811/@HSplitContainer5812/@Control5813/@Control5814/@Viewport5815/Spatial/Spatial" </node_path>
								<string> "res://Scripts/MapLoader.gd" </string>
							</array>
						</dictionary>
						<string> "2D" </string>
						<dictionary  shared="false">
							<string> "pixel_snap" </string>
							<bool> False </bool>
							<string> "zoom" </string>
							<real> 1 </real>
							<string> "use_snap" </string>
							<bool> False </bool>
							<string> "snap_vec" </string>
							<vector2> 10, 10 </vector2>
							<string> "ofs" </string>
							<vector2> 1, 1 </vector2>
						</dictionary>
						<string> "3D" </string>
						<dictionary  shared="false">
							<string> "deflight_rot_y" </string>
							<real> 0.628319 </real>
							<string> "zfar" </string>
							<real> 500 </real>
							<string> "fov" </string>
							<real> 45 </real>
							<string> "viewports" </string>
							<array  len="4" shared="false">
								<dictionary  shared="false">
									<string> "distance" </string>
									<real> 25.364721 </real>
									<string> "x_rot" </string>
									<real> 0.545795 </real>
									<string> "y_rot" </string>
									<real> -0.7625 </real>
									<string> "listener" </string>
									<bool> True </bool>
									<string> "use_environment" </string>
									<bool> False </bool>
									<string> "use_orthogonal" </string>
									<bool> False </bool>
									<string> "pos" </string>
									<vector3> -0.735546, 1.22503, -0.25281 </vector3>
								</dictionary>
								<dictionary  shared="false">
									<string> "distance" </string>
									<real> 4 </real>
									<string> "x_rot" </string>
									<real> 0 </real>
									<string> "y_rot" </string>
									<real> 0 </real>
									<string> "listener" </string>
									<bool> False </bool>
									<string> "use_environment" </string>
									<bool> False </bool>
									<string> "use_orthogonal" </string>
									<bool> False </bool>
									<string> "pos" </string>
									<vector3> 0, 0, 0 </vector3>
								</dictionary>
								<dictionary  shared="false">
									<string> "distance" </string>
									<real> 4 </real>
									<string> "x_rot" </string>
									<real> 0 </real>
									<string> "y_rot" </string>
									<real> 0 </real>
									<string> "listener" </string>
									<bool> False </bool>
									<string> "use_environment" </string>
									<bool> False </bool>
									<string> "use_orthogonal" </string>
									<bool> False </bool>
									<string> "pos" </string>
									<vector3> 0, 0, 0 </vector3>
								</dictionary>
								<dictionary  shared="false">
									<string> "distance" </string>
									<real> 4 </real>
									<string> "x_rot" </string>
									<real> 0 </real>
									<string> "y_rot" </string>
									<real> 0 </real>
									<string> "listener" </string>
									<bool> False </bool>
									<string> "use_environment" </string>
									<bool> False </bool>
									<string> "use_orthogonal" </string>
									<bool> False </bool>
									<string> "pos" </string>
									<vector3> 0, 0, 0 </vector3>
								</dictionary>
							</array>
							<string> "viewport_mode" </string>
							<int> 1 </int>
							<string> "default_light" </string>
							<bool> True </bool>
							<string> "ambient_light_color" </string>
							<color> 0.15, 0.15, 0.15, 1 </color>
							<string> "show_grid" </string>
							<bool> True </bool>
							<string> "show_origin" </string>
							<bool> True </bool>
							<string> "znear" </string>
							<real> 0.1 </real>
							<string> "default_srgb" </string>
							<bool> False </bool>
							<string> "deflight_rot_x" </string>
							<real> 0.942478 </real>
						</dictionary>
					</dictionary>
					<string> "__editor_run_settings__" </string>
					<dictionary  shared="false">
						<string> "custom_args" </string>
						<string> "-l $scene" </string>
						<string> "run_mode" </string>
						<int> 0 </int>
					</dictionary>
					<string> "__editor_plugin_screen__" </string>
					<string> "Script" </string>
				</dictionary>
				<resource  resource_type="Material" path="local://2">  </resource>
				<resource  resource_type="MeshLibrary" path="res://Map-Cubes.gt">  </resource>
				<bool> False </bool>
				<real> 1 </real>
				<int> 4 </int>
				<dictionary  shared="false">
					<string> "cells" </string>
					<int_array  len="0"> 						 </int_array>
				</dictionary>
				<dictionary  shared="false">
					<string> "_editor_clip_" </string>
					<int> 0 </int>
				</dictionary>
				<transform> 0.436993, -0.578402, 0.688832, 0, 0.765824, 0.643051, -0.899465, -0.281009, 0.334659, 11.921, 9.96582, 5.66734 </transform>
				<int> 1 </int>
				<int> 0 </int>
				<color> 1, 1, 1, 1 </color>
				<real> 0 </real>
				<real> 0.05 </real>
				<real> 60 </real>
				<resource name=""></resource>				<real> 0.5 </real>
				<real> 2 </real>
				<transform> 0.503941, 0.299983, -0.809974, -0.535268, 0.844442, -0.0202787, 0.677891, 0.443771, 0.586117, -7.47502, 2.3716, -0.545732 </transform>
				<real> 0.1 </real>
				<real> 100 </real>
				<int> 1048575 </int>
				<transform> 1, 0, 0, 0, 1, 0, 0, 0, 1, 2.89463, 8.36917, 4.00625 </transform>
				<resource  resource_type="Shape" path="local://3">  </resource>
				<resource  resource_type="Mesh" path="res://new_mesh.res">  </resource>
				<node_path> ".." </node_path>
				<resource  resource_type="PackedScene" path="res://cone_2.scn">  </resource>
				<node_path> "." </node_path>
				<resource  resource_type="Script" path="local://4">  </resource>
				<dictionary  shared="false">
					<string> "__editor_plugin_states__" </string>
					<dictionary  shared="false">
						<string> "2D" </string>
						<dictionary  shared="false">
							<string> "pixel_snap" </string>
							<bool> False </bool>
							<string> "zoom" </string>
							<real> 1 </real>
							<string> "use_snap" </string>
							<bool> False </bool>
							<string> "ofs" </string>
							<vector2> 1, 1 </vector2>
							<string> "snap" </string>
							<int> 10 </int>
						</dictionary>
						<string> "3D" </string>
						<dictionary  shared="false">
							<string> "viewports" </string>
							<array  len="4" shared="false">
								<dictionary  shared="false">
									<string> "distance" </string>
									<real> 15.984078 </real>
									<string> "x_rot" </string>
									<real> 0.6125 </real>
									<string> "y_rot" </string>
									<real> -0.525 </real>
									<string> "listener" </string>
									<bool> True </bool>
									<string> "use_environment" </string>
									<bool> False </bool>
									<string> "use_orthogonal" </string>
									<bool> False </bool>
									<string> "pos" </string>
									<vector3> 0, 0, 0 </vector3>
								</dictionary>
								<dictionary  shared="false">
									<string> "distance" </string>
									<real> 4 </real>
									<string> "x_rot" </string>
									<real> 0 </real>
									<string> "y_rot" </string>
									<real> 0 </real>
									<string> "listener" </string>
									<bool> False </bool>
									<string> "use_environment" </string>
									<bool> False </bool>
									<string> "use_orthogonal" </string>
									<bool> False </bool>
									<string> "pos" </string>
									<vector3> 0, 0, 0 </vector3>
								</dictionary>
								<dictionary  shared="false">
									<string> "distance" </string>
									<real> 4 </real>
									<string> "x_rot" </string>
									<real> 0 </real>
									<string> "y_rot" </string>
									<real> 0 </real>
									<string> "listener" </string>
									<bool> False </bool>
									<string> "use_environment" </string>
									<bool> False </bool>
									<string> "use_orthogonal" </string>
									<bool> False </bool>
									<string> "pos" </string>
									<vector3> 0, 0, 0 </vector3>
								</dictionary>
								<dictionary  shared="false">
									<string> "distance" </string>
									<real> 4 </real>
									<string> "x_rot" </string>
									<real> 0 </real>
									<string> "y_rot" </string>
									<real> 0 </real>
									<string> "listener" </string>
									<bool> False </bool>
									<string> "use_environment" </string>
									<bool> False </bool>
									<string> "use_orthogonal" </string>
									<bool> False </bool>
									<string> "pos" </string>
									<vector3> 0, 0, 0 </vector3>
								</dictionary>
							</array>
							<string> "zfar" </string>
							<real> 500 </real>
							<string> "deflight_rot_y" </string>
							<real> 0.628319 </real>
							<string> "fov" </string>
							<real> 45 </real>
							<string> "default_light" </string>
							<bool> True </bool>
							<string> "viewport_mode" </string>
							<int> 1 </int>
							<string> "ambient_light_color" </string>
							<color> 0.15, 0.15, 0.15, 1 </color>
							<string> "show_grid" </string>
							<bool> True </bool>
							<string> "znear" </string>
							<real> 0.1 </real>
							<string> "show_origin" </string>
							<bool> True </bool>
							<string> "deflight_rot_x" </string>
							<real> 0.942478 </real>
							<string> "default_srgb" </string>
							<bool> False </bool>
						</dictionary>
					</dictionary>
					<string> "__editor_run_settings__" </string>
					<dictionary  shared="false">
						<string> "custom_args" </string>
						<string> "-l $scene" </string>
						<string> "run_mode" </string>
						<int> 0 </int>
					</dictionary>
					<string> "__editor_plugin_screen__" </string>
					<string> "3D" </string>
				</dictionary>
			</array>
			<string> "nodes" </string>
			<int_array  len="234"> 				-1, -1, 0, 0, -1, 6, 1, 0, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 0, 0, 0, 7, 7, -1, 14, 1, 0, 2, 1, 3, 2, 8, 6, 9, 7, 10, 7, 11, 8, 12, 9, 13, 2, 14, 2, 15, 2, 16, 8, 17, 10, 5, 11, 0, 0, 0, 18, 18, -1, 23, 1, 0, 2, 1, 19, 12, 3, 2, 20, 13, 21, 2, 22, 7, 23, 14, 24, 8, 25, 15, 26, 15, 27, 7, 28, 16, 29, 17, 30, 16, 31, 18, 32, 8, 33, 19, 34, 14, 35, 14, 36, 16, 37, 20, 38, 21, 0, 2, 0, 39, 39, -1, 14, 1, 0, 2, 1, 19, 22, 3, 2, 40, 14, 41, 18, 42, 23, 43, 24, 44, 13, 45, 7, 46, 25, 47, 19, 48, 16, 49, 16, 0, 0, 0, 50, 50, -1, 4, 1, 0, 2, 1, 19, 26, 3, 2, 0, 4, 0, 51, 51, -1, 5, 1, 0, 2, 1, 3, 2, 52, 27, 53, 7, 0, 4, 0, 54, 54, -1, 19, 1, 0, 2, 1, 3, 7, 20, 13, 55, 2, 56, 19, 57, 2, 58, 2, 59, 16, 60, 16, 61, 16, 62, 7, 63, 7, 64, 7, 65, 7, 66, 7, 67, 14, 68, 28, 69, 29, 0, 0, 0, 0, 0, 30, 4, 1, 31, 2, 1, 4, 32, 5, 33, 0 </int_array>
			<string> "conns" </string>
			<int_array  len="0"> 				 </int_array>
		</dictionary>

	</main_resource>
</resource_file>